import streamlit as st
import requests
from collections import Counter

# =========================
# FUN√á√ïES AUXILIARES
# =========================

# Linhas e colunas fixas da Lotof√°cil
linhas = [
    list(range(1, 6)),
    list(range(6, 11)),
    list(range(11, 16)),
    list(range(16, 21)),
    list(range(21, 26))
]

colunas = [
    list(range(1, 26, 5)),
    list(range(2, 26, 5)),
    list(range(3, 26, 5)),
    list(range(4, 26, 5)),
    list(range(5, 26, 5))
]

def capturar_ultimos_resultados(qtd=100):
    """Captura os √∫ltimos resultados da Lotof√°cil"""
    url_base = "https://loteriascaixa-api.herokuapp.com/api/lotofacil/"
    concursos = []
    try:
        resp = requests.get(url_base)
        if resp.status_code != 200:
            return []
        dados = resp.json()
        ultimo_numero = int(dados[0]['concurso'])
        for i in range(qtd):
            resp = requests.get(f"{url_base}{ultimo_numero - i}")
            if resp.status_code == 200:
                data = resp.json()[0]
                dezenas = [int(d) for d in data['dezenas']]
                concursos.append(dezenas)
    except Exception as e:
        st.error(f"Erro ao capturar resultados: {e}")
    return concursos

def contar_padroes(concursos):
    """Conta os padr√µes de linhas e colunas"""
    padrao_linhas = []
    padrao_colunas = []

    for concurso in concursos:
        linha_cont = [sum(1 for n in concurso if n in l) for l in linhas]
        col_cont = [sum(1 for n in concurso if n in c) for c in colunas]
        padrao_linhas.append(tuple(linha_cont))
        padrao_colunas.append(tuple(col_cont))

    freq_linhas = Counter(padrao_linhas)
    freq_colunas = Counter(padrao_colunas)
    return freq_linhas, freq_colunas

def gerar_padroes_futuros(freq_linhas, freq_colunas, n=5):
    """Gera n padr√µes futuros combinando os mais frequentes"""
    padroes_linhas = [p for p, _ in freq_linhas.most_common(n)]
    padroes_colunas = [p for p, _ in freq_colunas.most_common(n)]
    futuros = []
    for i in range(n):
        futuros.append({
            "linhas": padroes_linhas[i % len(padroes_linhas)],
            "colunas": padroes_colunas[i % len(padroes_colunas)]
        })
    return futuros

# =========================
# APP STREAMLIT
# =========================

st.set_page_config(page_title="Sistema Lotof√°cil", layout="wide")

# Menu lateral
menu = st.sidebar.radio("Navegar", [
    "In√≠cio",
    "Gerar Cart√µes",
    "Estat√≠sticas",
    "Padr√µes Linha√óColuna"  # <- nova aba adicionada
])

# =========================
# CONTE√öDO DAS ABAS
# =========================

if menu == "In√≠cio":
    st.title("üìä Sistema de An√°lise da Lotof√°cil")
    st.write("Bem-vindo! Escolha uma aba no menu lateral.")

elif menu == "Gerar Cart√µes":
    st.title("üÉè Gerar Cart√µes")
    st.write("Aqui entra sua l√≥gica j√° existente para gera√ß√£o de cart√µes.")

elif menu == "Estat√≠sticas":
    st.title("üìà Estat√≠sticas")
    st.write("Aqui voc√™ mant√©m suas estat√≠sticas atuais.")

elif menu == "Padr√µes Linha√óColuna":
    st.title("üî¢ Padr√µes de Linhas √ó Colunas")
    st.write("An√°lise de concursos anteriores para detectar padr√µes de linhas e colunas.")

    qtd = st.slider("Quantidade de concursos para analisar", 50, 500, 100, 10)

    if st.button("üîç Analisar Padr√µes"):
        concursos = capturar_ultimos_resultados(qtd)
        if not concursos:
            st.error("N√£o foi poss√≠vel capturar concursos.")
        else:
            freq_linhas, freq_colunas = contar_padroes(concursos)

            st.subheader("üìå Padr√µes mais frequentes de Linhas")
            for padrao, freq in freq_linhas.most_common(5):
                st.write(f"{padrao} ‚Üí {freq} vezes")

            st.subheader("üìå Padr√µes mais frequentes de Colunas")
            for padrao, freq in freq_colunas.most_common(5):
                st.write(f"{padrao} ‚Üí {freq} vezes")

            st.subheader("üéØ Padr√µes futuros sugeridos")
            futuros = gerar_padroes_futuros(freq_linhas, freq_colunas)
            for i, p in enumerate(futuros, 1):
                st.write(f"**Padr√£o Futuro {i}:** Linhas {p['linhas']} | Colunas {p['colunas']}")
